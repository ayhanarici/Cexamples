#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *n1, int *n2) 
{ 
    int tmp = *n1; 
    *n1 = *n2; 
    *n2 = tmp; 
} 
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
int partition (int arr[], int low, int high) 
{ 
    int pivot = arr[high];
    int i = (low - 1);
    int j=0;
    for (j = low; j <= high- 1; j++) 
    { 
        if (arr[j] < pivot) 
        { 
            i++;  
            swap(&arr[i], &arr[j]); 
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    return (i + 1); 
} 
void selectionSort(int arr[], int n) 
{ 
    int i, j, min_idx; 
    for (i = 0; i < n-1; i++) 
    { 
        min_idx = i; 
        for (j = i+1; j < n; j++) 
          if (arr[j] < arr[min_idx]) 
            min_idx = j; 
        swap(&arr[min_idx], &arr[i]); 
    } 
} 
void insertionSort(int arr[], int n) 
{ 
    int i, key, j; 
    for (i = 1; i < n; i++) { 
        key = arr[i]; 
        j = i - 1; 
        while (j >= 0 && arr[j] > key) { 
            arr[j + 1] = arr[j]; 
            j = j - 1; 
        } 
        arr[j + 1] = key; 
    } 
} 

void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) 
    { 
        int pi = partition(arr, low, high); 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 

void countingSort(int array[], int size) {
  int output[size];
  int max = array[0];
  int i=0;
  for (i = 1; i < size; i++) {
    if (array[i] > max)
      max = array[i];
  }
  int count[max];
  for (i = 0; i <= max; ++i) {
    count[i] = 0;
  }
  for (i = 0; i < size; i++) {
    count[array[i]]++;
  }
  for (i = 1; i <= max; i++) {
    count[i] += count[i - 1];
  }
  for (i = size - 1; i >= 0; i--) {
    output[count[array[i]] - 1] = array[i];
    count[array[i]]--;
  }
  for (i = 0; i < size; i++) {
    array[i] = output[i];
  }
}
  
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
} 
void resetArray(int arr[],int size)
{
	int i;
	
    for (i = 0; i < 100000; i++)
    {
        arr[i]=0;
    }
	FILE *myFile;
    myFile = fopen("number.txt", "r");
    
    for (i = 0; i < size; i++)
    {
        fscanf(myFile, "%d", &arr[i]);
    }
	fclose(myFile);
}
  
int main() 
{ 
	int arr[100000];
    int n=100000;

    resetArray(arr,n);
    clock_t start,stop; 
    start = clock();
    selectionSort(arr, n);
	  stop = clock(); 
    double time_taken = (double)(stop-start)/CLOCKS_PER_SEC; 
    printf("Selection Sort :%2.10f  \n",time_taken); 
    //printArray(arr, n);
    
    resetArray(arr,n);
    start = clock();
    insertionSort(arr, n);
    stop = clock(); 
    time_taken = (double)(stop-start)/CLOCKS_PER_SEC;
    printf("Insertion Sort :%2.10f  \n",time_taken); 
    //printArray(arr, n);
    

    resetArray(arr,n);
    start = clock();
	  quickSort(arr,0,n-1);
    stop = clock(); 
    time_taken = (double)(stop-start)/CLOCKS_PER_SEC;
    printf("Quick Sort :%2.10f  \n",time_taken); 
    //printArray(arr, n);
    
    resetArray(arr,n);
    start = clock();
    mergeSort(arr,0,n-1);
    stop = clock(); 
    time_taken = (double)(stop-start)/CLOCKS_PER_SEC;
    printf("Merge Sort :%2.10f  \n",time_taken); 
    //printArray(arr, n);
    
    resetArray(arr,n);
    start = clock();
	  countingSort(arr,n);
    stop = clock(); 
    time_taken = (double)(stop-start)/CLOCKS_PER_SEC;
    printf("Counting Sort :%2.10f  \n",time_taken); 
    //printArray(arr, n); 
    
    return 0; 
} 
